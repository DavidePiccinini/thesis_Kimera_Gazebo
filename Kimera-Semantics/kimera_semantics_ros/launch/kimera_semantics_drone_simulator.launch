<?xml version="1.0" encoding="ISO-8859-15"?>
<launch>
  <arg name="voxel_size"     default="0.10"/>
  <arg name="max_ray_length_m" default="5"/>
  <param name="use_sim_time" value="true" />

  <arg name="sensor_frame" default="stereo_cam_left_camera_frame"/>

  <!-- Type of reconstruction, false for metric-only -->
  <arg name="metric_semantic_reconstruction" value="false"/>
  <arg name="semantic_label_2_color_csv_filepath" value="$(find kimera_semantics_ros)/cfg/tesse_multiscene_office1_segmentation_mapping.csv"/>

  <!-- Input -->
  <arg name="semantic_pointcloud"         default="/stereo_gray/dense_stereo/pointcloud"/>
  <!-- Only used for dense stereo depth, but we do that in Kimera VIO ROS -->
  <arg name="left_cam_info_topic"         default="/stereo_cam/left/camera/camera_info"/>
  <arg name="right_cam_info_topic"        default="/stereo_cam/right/camera/camera_info"/>
  <arg name="left_cam_topic"              default="/stereo_cam/left/camera/image"/>
  <arg name="right_cam_topic"             default="/stereo_cam/right/camera/image"/>
  
  <!-- Semantics topic-->
  <arg name="left_cam_segmentation_topic" default="/dev/null"/>
  
  <!-- We dont use a depth topic, but a pointcloud directly -->
  <arg name="left_cam_depth_topic"        default="/dev/null"/>
  <arg name="use_freespace_pointcloud"    default="true" />
  <arg name="freespace_pointcloud"        default="/stereo_gray/dense_stereo/freespace_pointcloud"/>

  <!-- We dont need to run stereo depth or publish point clouds since it is done in Kimera VIO ROS already. So we just need to subscribe in "semantic_pointcloud" to the actual pointcloud from Kimera VIO ROS -->
  <arg name="publish_point_clouds" default="false"/>
  <arg name="run_stereo_dense"     default="false"/>

  <arg name="pkg_type"    default="kimera_semantics_ros"  if="$(arg metric_semantic_reconstruction)"/>
  <arg name="server_type" default="kimera_semantics_node" if="$(arg metric_semantic_reconstruction)"/>
  <arg name="pkg_type"    default="voxblox_ros" unless="$(arg metric_semantic_reconstruction)"/>
  <arg name="server_type" default="tsdf_server" unless="$(arg metric_semantic_reconstruction)"/>

  <include file="$(find kimera_semantics_ros)/launch/kimera_semantics.launch" pass_all_args="true"/>
</launch>
